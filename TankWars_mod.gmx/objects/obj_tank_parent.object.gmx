<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

// Physics!
friction = 0.5;
max_speed = 8;
turn_radius = 6;

// Health
my_health = 100;

// Shield
shield_health = 0;

// Secondary item
secondary_type = -1;
secondary_amt = 0;

// Which one y'all hit me?
last_damaged_by = noone;

// Set my sprite
my_sprite = sprite_index;
my_subimage = 0;
my_image_speed = 0;

// Add me to the global score list
ds_map_add(global.tank_scores, object_get_name(object_index), 0);
// TODO: Change this to support multi-threaded application 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for explosion, adjust sprite appropriately

if(string_pos("explo", sprite_get_name(my_sprite)) == 0)
{
    if(my_health &gt; 0)
    {
        if(image_angle &gt;= 360)
        {
            image_angle -= 360;
        }
        else if(image_angle &lt; 0)
        {
            image_angle += 360;
        }
        if(direction &gt;= 360)
        {
            direction -= 360;
        }
        else if(direction &lt; 0)
        {
            direction += 360;
        }
        
        angle_diff = angle_difference(image_angle, direction);
        
        if(abs(angle_diff) &lt;= turn_radius)
        {
            direction = image_angle;
        }
        else if(angle_diff &gt; 0)
        {
            direction += turn_radius;
        }
        else if(angle_diff &lt; 0)
        {
            direction -= turn_radius;
        }
    }
    else
    {
        event_perform(ev_other, ev_user1);
    }
}
else if(image_index == sprite_get_number(my_sprite) - 1)
{
    // Apparently, if you want something done correctly, don't rely upon GMS :(
    event_perform(ev_other, ev_animation_end);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check road conditions

if(position_meeting(x, y, obj_mud_base))
{
    friction = 0.75;
    if(speed &gt; 3)
    {
        speed = 3;
    }
    max_speed = 3;
}
else if(position_meeting(x, y, obj_ice_base))
{
    friction = 0.1;
    max_speed = 10;
    turn_radius = 2;
}
else
{
    friction = 0.5;
    max_speed = 8;
    if(abs(angle_diff) &gt; 24)
        turn_radius = abs(angle_diff) / 2;
    else
        turn_radius = 6;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tank_parent">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-speed</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>TODO: Need proper deflection, instead of absolute 180</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce only when solid

if(other.solid)
{
    speed = -speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire current secondary weapon (if there is one, and we have ammo)

// Initialize variable
var projectile = noone;

if(secondary_amt &gt; 0)
{
    switch(secondary_type)
    {
        case 0: // Rockets
            projectile = instance_create(x + lengthdir_x(34, direction), y + lengthdir_y(34, direction), obj_rocket);
            break;
        case 1: // Bouncing bombs
            projectile = instance_create(x + lengthdir_x(34, direction), y + lengthdir_y(34, direction), obj_bouncing_bomb);
            break;
    }
    if(projectile != noone)
    {
        projectile.fired_from = id;
        projectile.direction = direction;
        secondary_amt--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// We received a new pickup! What is it? What do we do with it!?

switch(secondary_type)
{
    case 0:
        break;
    case 1:
        break;
    case 2:
        shield_health = (secondary_amt * 4);
        break;
    case 3:
        my_health = min(100, my_health + (secondary_amt * 5));
        secondary_amt = 0;
        break;
    default:
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// We 'splodin!

// Animate your death-splosion
my_sprite = spr_explosion_large;
my_subimage = -1;
my_image_speed = 1;

// Award points to the bastard what shot ya
if(instance_exists(last_damaged_by))
{
    global.tank_scores[? object_get_name(last_damaged_by.object_index)] += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If we're done exploding, let's leave quietly

if(string_pos("explo", sprite_get_name(my_sprite)) != 0)
{
    image_index = image_number - 1;
    image_speed = 0;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw me and mine

my_subimage = image_angle / 6;
draw_sprite(my_sprite, my_subimage, x, y);
image_speed = my_image_speed;


draw_healthbar(x - 20, y - 35, x + 20, y - 30, my_health, c_black, c_red, c_green, 0, true, false);

if(secondary_type &gt;= 0 and secondary_type &lt; 3)
{
    draw_sprite(spr_secondary, secondary_type, x - 17, y + 25);
    draw_set_font(fnt_hud);
    draw_set_color(c_black);
    if(secondary_type == 2)
    {
        draw_text(x + 1+7, y + 25, string(shield_health));
    }
    else
    {
        draw_text(x + 17, y + 25, string(secondary_amt));
    }
}

if(shield_health &gt; 0)
{
    draw_sprite(spr_shield, 0, x, y);
}


// Debug
draw_set_color(c_red);
draw_arrow(x, y, x + lengthdir_x(64, direction), y + lengthdir_y(64, direction), 10);
draw_text(x + lengthdir_x(64, direction), y + lengthdir_y(64, direction), abs(angle_diff));
draw_set_color(c_blue);
draw_arrow(x, y, x + lengthdir_x(64, image_angle), y + lengthdir_y(64, image_angle), 10);
draw_text(x + lengthdir_x(64, image_angle), y + lengthdir_y(64, image_angle), turn_radius);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
