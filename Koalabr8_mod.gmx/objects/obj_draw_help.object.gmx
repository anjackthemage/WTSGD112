<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Variables
var new_instance = noone;
// Buffer for text formatting
x_padding = 15;
y_padding = 20;

// Room title
room_title = instance_create(x, y, obj_room_title);
room_title.title_text = "Game Information";

// Define all of the text strings here
info_text_x = x_padding;
info_text_y = room_title.title_height;

basic_story = "A group of telepathic, co-dependant koalas have been trapped in a torture factory by a poacher. You must guide the poor creatures to the exit. Unfortunately, due to their lack of free will, all the koala's will follow whatever order you give.";

move_instructions = "Direct the koalas by pressing the up, down, left and right arrow keys. Remember, all of the koala's will move in whatever direction you press, so pay attention. If you make a mistake, press the 'R' key (or click the 'Restart button') to restart the room."

description_text = "Hover over an icon on the left, to learn more about it.";
exit_text = "PRESS ANY KEY TO RETURN TO MENU";

// Ugh, arbitrary numbers
description_text_x = 380;
description_text_y = 360;

// Define lists
item_sprites = ds_list_create();
// First is the list of sprites
ds_list_add(item_sprites, spr_koala_stand, spr_saw_horizontal, spr_TNT, spr_detonator, spr_lock_blue, spr_lock_yellow, spr_lock_red, spr_switch_blue, spr_rock, spr_exit1, spr_exit2);

item_text = ds_map_create();
// Now a list of text, associated with each sprite (common denominator)
ds_map_add(item_text, spr_koala_stand, "A telepathic koala who cannot make decisions for itself. You're responsible for getting the brainless little fuzz-ball to safety.");
ds_map_add(item_text, spr_saw_horizontal, "Saws are mindless killing machines that move back and forth in a single, straight line. They will eliminate any koala who gets in their way.");
ds_map_add(item_text, spr_TNT, "This stuff has been sitting around for a long time and has become quite volatile. The slightest touch will set if off.");
ds_map_add(item_text, spr_detonator, "Someone has been kind enough to wire up all the unstable TNT so that touching this switch will set it all off at once. That doesn't seem safe.");
ds_map_add(item_text, spr_lock_blue, "There are several locked gates in this abbatoir. Koalas cannot pass until the locks are removed. Blue locks are permanently disabled when the corresponding lever is pulled.");
ds_map_add(item_text, spr_lock_yellow, "Unlike blue locks, yellow locks will re-appear a few seconds after the koalas stop pulling the levers.");
ds_map_add(item_text, spr_lock_red, "Red locks work like yellow locks except they return immediately once no more red levers are being pulled.");
ds_map_add(item_text, spr_switch_blue, "Levers will remove locks of the corresponding color. Levers reset if the corresponding gates re-appear.");
ds_map_add(item_text, spr_rock, "Years of neglect have caused the infrastruction to fail and allow boulders to fall into the death-traps. Use these to help you get past obstacles but be careful not to accidentally crush vital equipment.");
ds_map_add(item_text, spr_exit1, "This is your goal. Every koala who makes it to one of these switches will (temporarily) escape the death trap. Red exits can be used an unlimited number of times.");
ds_map_add(item_text, spr_exit2, "Like red exits, these allow koalas to escape. However, blue exits can only be used once, each. So plan ahead.");

item_objects = ds_map_create();
// Now we spawn instances of obj_placeholder and assign sprites
for (var interval = 0; interval &lt; ds_map_size(item_text); interval++)
{
    new_instance = instance_create(info_text_x, y, obj_placeholder);
    new_instance.sprite_index = item_sprites[| interval];
    // There's probably a better way to do this... :(
    switch(item_sprites[| interval])
    {
        case spr_koala_stand:
            new_instance.y = 320;
            break;
        case spr_saw_horizontal:
            new_instance.x += 80;
            new_instance.y = 320;
            break;
        case spr_rock:
            new_instance.x += 40
            new_instance.y = 360;
        case spr_TNT:
            new_instance.y = 360;
            break;
        case spr_detonator:
            new_instance.image_speed = 0;
            new_instance.x += 80;
            new_instance.y = 360;
            break;
        case spr_lock_blue:
            new_instance.y = 400;
            break;
        case spr_lock_yellow:
            new_instance.x += 40;
            new_instance.y = 400;
            break;
        case spr_lock_red:
            new_instance.x += 80;
            new_instance.y = 400;
            break;
        case spr_switch_blue:
            new_instance.image_speed = 0;
            new_instance.x += 40;
            new_instance.y = 440;
        case spr_exit1:
            new_instance.y = 440;
            break;
        case spr_exit2:
            new_instance.x += 80;
            new_instance.y = 440;
    }
    
    ds_map_add(item_objects, item_sprites[| interval], new_instance);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_font(fnt_body);

// Variables
var next_y = 0;
var info_text_box_width = room_width - (x_padding * 2);
var desc_text_box_width = (room_width - 120) - (x_padding * 2);

draw_set_color(c_aqua);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// Because we don't know the order in which things are being drawn
if(info_text_y == 0)
{
    info_text_y = room_title.title_height;
}

script_draw_text_outlined_ext(info_text_x, info_text_y, "Game By: Habgood and Overmars#Mod By Gary Reif", x_padding, info_text_box_width, c_black, 1);

next_y = info_text_y + string_height_ext("Game By: Habgood and Overmars#Mod By Gary Reif", x_padding, info_text_box_width) + 20;

// Fit the first bit of text
script_draw_text_outlined_ext(info_text_x, next_y, basic_story, x_padding, info_text_box_width, c_black, 1);

// Track delta y
next_y = next_y + string_height_ext(basic_story, x_padding, info_text_box_width) + 20;

// Fit the bit about controls
script_draw_text_outlined_ext(info_text_x, next_y, move_instructions, x_padding, info_text_box_width, c_black, 1);
next_y += string_height_ext(basic_story, x_padding, info_text_box_width) + 15;

// Remind user to hover over objects
script_draw_text_outlined_ext(info_text_x, next_y, "Hover over an object on the bottom left, to learn more about it.##" + exit_text, x_padding, info_text_box_width, c_black, 1);

// Set description text
with(obj_placeholder)
{
    if(position_meeting(mouse_x, mouse_y, id))
    {
        other.description_text = other.item_text[? sprite_index];
    }
}

// Draw the description text
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
script_draw_text_outlined_ext(description_text_x, description_text_y, description_text, x_padding, desc_text_box_width, c_black, 1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>rm_menu</room>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
