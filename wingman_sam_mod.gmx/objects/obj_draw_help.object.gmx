<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Variables
var new_instance = noone;
// Buffer for text formatting
x_padding = 15;
y_padding = 20;

// Room title
room_title = instance_create(x, y, obj_room_title);
room_title.title_text = "Game Information";

// Define all of the text strings here
info_text_x = x_padding;
info_text_y = room_title.title_height;



move_instructions_p1 = "Player 1 controls: Move your airplane with the WASD keys. Shoot with the spacebar.";
move_instructions_p2 = "Player 2 controls: Move your airplane with the arrow keys. Shoot with the Enter/Return key";

description_text = "Hover over an icon on the left, to learn more about it.";
exit_text = "PRESS ANY KEY TO RETURN TO MENU";

// Ugh, arbitrary numbers
description_text_x = 380;
description_text_y = 360;

// Define lists
item_sprites = ds_list_create();
// First is the list of sprites
ds_list_add(item_sprites, spr_plane_1, spr_plane_2, spr_enemy_basic, spr_enemy_right, spr_enemy_up, spr_enemy_shoot, spr_enemy_target, spr_obj_boss);

item_text = ds_map_create();
// Now a list of text, associated with each sprite (common denominator)
ds_map_add(item_text, spr_plane_1, "Player One");
ds_map_add(item_text, spr_plane_2, "Player Two");
ds_map_add(item_text, spr_enemy_basic, "Enemy plane.");
ds_map_add(item_text, spr_enemy_right, "Enemy plane.");
ds_map_add(item_text, spr_enemy_up, "Enemy plane.");
ds_map_add(item_text, spr_enemy_shoot, "Enemy plane that shoots forward.");
ds_map_add(item_text, spr_enemy_target, "Enemy plane that shoots at players.");
ds_map_add(item_text, spr_obj_boss, "Large enemy plane. Boss.");

item_objects = ds_map_create();
// Now we spawn instances of obj_placeholder and assign sprites
for (var interval = 0; interval &lt; ds_map_size(item_text); interval++)
{
    new_instance = instance_create(info_text_x, y, obj_placeholder);
    new_instance.sprite_index = item_sprites[| interval];
    // There's probably a better way to do this... :(
    switch(item_sprites[| interval])
    {
        case spr_plane_1:
            new_instance.y = 320;
            break;
        case spr_plane_2:
            new_instance.x += 80;
            new_instance.y = 320;
            break;
        case spr_enemy_basic:
            new_instance.x += 40
            new_instance.y = 360;
            break
        case spr_enemy_right:
            new_instance.y = 360;
            break;
        case spr_enemy_up:
            new_instance.image_speed = 0;
            new_instance.x += 80;
            new_instance.y = 360;
            break;
        case spr_enemy_shoot:
            new_instance.y = 400;
            break;
        case spr_enemy_target:
            new_instance.x += 40;
            new_instance.y = 400;
            break;
        case spr_obj_boss:
            new_instance.x += 80;
            new_instance.y = 400;
            break;
    }
    
    ds_map_add(item_objects, item_sprites[| interval], new_instance);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_font(fnt_panel);

// Variables
var next_y = 0;
var info_text_box_width = room_width - (x_padding * 2);
var desc_text_box_width = (room_width - 120) - (x_padding * 2);

draw_set_color(c_aqua);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// Because we don't know the order in which things are being drawn
if(info_text_y == 0)
{
    info_text_y = room_title.title_height;
}

script_draw_text_outlined_ext(info_text_x, info_text_y, "Game By: Habgood and Overmars#Mod By Gary Reif", x_padding, info_text_box_width, c_black, 1);

next_y = info_text_y + string_height_ext("Game By: Habgood and Overmars#Mod By Gary Reif", x_padding, info_text_box_width) + 20;

// Fit the bit about controls
script_draw_text_outlined_ext(info_text_x, next_y, move_instructions_p1, x_padding, info_text_box_width, c_black, 1);
next_y += string_height_ext(move_instructions_p1, x_padding, info_text_box_width) + 5;
script_draw_text_outlined_ext(info_text_x, next_y, move_instructions_p2, x_padding, info_text_box_width, c_black, 1);
next_y += string_height_ext(move_instructions_p2, x_padding, info_text_box_width) + 5;

// Remind user to hover over objects
script_draw_text_outlined_ext(info_text_x, next_y, "Hover over an object on the bottom left, to learn more about it.##" + exit_text, x_padding, info_text_box_width, c_black, 1);

// Set description text
with(obj_placeholder)
{
    if(position_meeting(mouse_x, mouse_y, id))
    {
        other.description_text = other.item_text[? sprite_index];
    }
}

// Draw the description text
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
script_draw_text_outlined_ext(description_text_x, description_text_y, description_text, x_padding, desc_text_box_width, c_black, 1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>rm_title</room>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
