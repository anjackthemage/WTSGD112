<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_battle_main</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// Menu modes
char_select_mode = 0;
action_select_mode = 1;
target_select_mode = 2;
wait_mode = -1;

mode = wait_mode;
next_mode = char_select_mode;

// Selected entities
selected_enemy = undefined;
selected_character = undefined;
selected_action = undefined;

// Char list
char_list = ds_list_create();
ds_list_add(char_list, obj_hunter, obj_monk, obj_librarian, obj_doctor);

// Character HP map
char_hp = ds_map_create();
ds_map_add(char_hp, obj_hunter, obj_hunter.hit_points);
ds_map_add(char_hp, obj_monk, obj_monk.hit_points);
ds_map_add(char_hp, obj_librarian, obj_librarian.hit_points);
ds_map_add(char_hp, obj_doctor, obj_doctor.hit_points);

// Action list
action_list = ds_list_create();
ds_list_add(action_list, "Attack", "Alchemy", "Item", "Escape")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw battle HUD
// HUD background
draw_sprite(sprite_index, 0, x, y);

draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_color(c_white);

// Action items
for (var interval = 0; interval &lt; ds_list_size(action_list); interval++)
{
    if(selected_action == action_list[| interval])
    {
        draw_rectangle(x + 15, y + ((sprite_height / 5) * (interval + 1)) - (string_height(action_list[| interval]) / 2), x + 15 + string_width(action_list[| interval]), y + ((sprite_height / 5) * (interval + 1)) + (string_height(action_list[| interval]) / 2), false);
        draw_set_color(c_black);
    }
    draw_text(x + 15, y + ((sprite_height / 5) * (interval + 1)), action_list[| interval]);
    draw_set_color(c_white);
}

// Character Names
// TODO: this should be a loop
draw_set_halign(fa_right);

draw_text(x + ((3/4) * sprite_width) - 5, y + ((sprite_height / 5) * 1), obj_hunter.name);
draw_text(x + ((3/4) * sprite_width) - 5, y + ((sprite_height / 5) * 2), obj_monk.name);
draw_text(x + ((3/4) * sprite_width) - 5, y + ((sprite_height / 5) * 3), obj_librarian.name);
draw_text(x + ((3/4) * sprite_width) - 5, y + ((sprite_height / 5) * 4), obj_doctor.name);

// Character HP
// TODO: this should also be a list
draw_rectangle(x + ((3/4) * sprite_width) + 5, y + ((sprite_height / 5) * 1) - (string_height(obj_hunter.name)/2), x + ((3/4) * sprite_width) + 5 + 175, y + ((sprite_height / 5) * 1) + string_height(obj_hunter.name), true);
draw_rectangle(x + ((3/4) * sprite_width) + 5, y + ((sprite_height / 5) * 2) - (string_height(obj_monk.name)/2), x + ((3/4) * sprite_width) + 5 + 175, y + ((sprite_height / 5) * 2) + string_height(obj_monk.name), true);
draw_rectangle(x + ((3/4) * sprite_width) + 5, y + ((sprite_height / 5) * 3) - (string_height(obj_librarian.name)/2), x + ((3/4) * sprite_width) + 5 + 175, y + ((sprite_height / 5) * 3) + string_height(obj_librarian.name), true);
draw_rectangle(x + ((3/4) * sprite_width) + 5, y + ((sprite_height / 5) * 4) - (string_height(obj_doctor.name)/2), x + ((3/4) * sprite_width) + 5 + 175, y + ((sprite_height / 5) * 4) + string_height(obj_doctor.name), true);
draw_set_color(c_green);
draw_rectangle(x + ((3/4) * sprite_width) + 6, y + ((sprite_height / 5) * 1) - (string_height(obj_hunter.name)/2) + 2, x + ((3/4) * sprite_width) + 4 + ((175 / obj_hunter.hit_points_max) * obj_hunter.hit_points), y + ((sprite_height / 5) * 1) + string_height(obj_hunter.name) - 1, false);
draw_rectangle(x + ((3/4) * sprite_width) + 6, y + ((sprite_height / 5) * 2) - (string_height(obj_monk.name)/2) + 2, x + ((3/4) * sprite_width) + 4 + ((175 / obj_monk.hit_points_max) * obj_monk.hit_points), y + ((sprite_height / 5) * 2) + string_height(obj_monk.name) - 1, false);
draw_rectangle(x + ((3/4) * sprite_width) + 6, y + ((sprite_height / 5) * 3) - (string_height(obj_librarian.name)/2) + 2, x + ((3/4) * sprite_width) + 4 + ((175 / obj_librarian.hit_points_max) * obj_librarian.hit_points), y + ((sprite_height / 5) * 3) + string_height(obj_librarian.name) - 1, false);
draw_rectangle(x + ((3/4) * sprite_width) + 6, y + ((sprite_height / 5) * 4) - (string_height(obj_doctor.name)/2) + 2, x + ((3/4) * sprite_width) + 4 + ((175 / obj_doctor.hit_points_max) * obj_doctor.hit_points), y + ((sprite_height / 5) * 4) + string_height(obj_doctor.name) - 1, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu navigation

up_key = ord("W");
down_key = ord("S");
left_key = ord("A");
right_key = ord("D");

switch(mode)
{
    case char_select_mode:
        if(keyboard_check(down_key))
        {
            if(!is_undefined(selected_character))
            {
                selected_character.selected = false;
            }
            if(is_undefined(selected_character) or (!is_undefined(selected_character) and ds_list_find_index(char_list, selected_character) == ds_list_size(char_list) - 1))
            {
                selected_character = char_list[| 0];
            }
            else
            {
                for(var interval = ds_list_find_index(char_list, selected_character); interval &lt; ds_list_size(char_list); interval++)
                {
                    if(!is_undefined(char_list[| interval]) and char_list[| interval] != selected_character)
                    {
                        selected_character = char_list[| interval];
                        break;
                    }
                }
            }
            
            if(!is_undefined(selected_character))
            {
                selected_character.selected = true;
                show_debug_message(selected_character.name);
            }
        }
        else if(keyboard_check(up_key))
        {
            if(!is_undefined(selected_character))
            {
                selected_character.selected = false;
            }
            if(is_undefined(selected_character) or (!is_undefined(selected_character) and ds_list_find_index(char_list, selected_character) == 0))
            {
                selected_character = char_list[| ds_list_size(char_list) - 1];
            }
            else
            {
                for(var interval = ds_list_find_index(char_list, selected_character); interval &gt; -1; interval--)
                {
                    if(!is_undefined(char_list[| interval]) and char_list[| interval] != selected_character)
                    {
                        selected_character = char_list[| interval];
                        break;
                    }
                }
            }
            
            if(!is_undefined(selected_character))
            {
                selected_character.selected = true;
            }
        }
        break;
    case action_select_mode:
        if(keyboard_check(down_key))
        {
            if(is_undefined(selected_action))
            {
                selected_action = action_list[| -1];
            }
            else if(ds_list_find_index(action_list, selected_action) == ds_list_size(action_list) - 1)
            {
                selected_action = action_list[| 0];
            }
            else
            {
                selected_action = action_list[| ds_list_find_index(action_list, selected_action) + 1];
            }
        }
        else if(keyboard_check(up_key))
        {
            if(is_undefined(selected_action))
            {
                selected_action = action_list[| ds_list_size(action_list) - 1];
            }
            else if(ds_list_find_index(action_list, selected_action) == 0)
            {
                selected_action = action_list[| ds_list_size(action_list) - 1];
            }
            else
            {
                selected_action = action_list[| ds_list_find_index(action_list, selected_action) - 1];
            }
        }
        break;
    case target_select_mode:
        if(keyboard_check(down_key))
        {
            if(!is_undefined(selected_enemy))
            {
                selected_enemy.selected = false;
            }
            if(is_undefined(selected_enemy) or (!is_undefined(selected_enemy) and ds_list_find_index(obj_battle_director.mob_list, selected_enemy) == ds_list_size(obj_battle_director.mob_list) - 1))
            {
                selected_enemy = obj_battle_director.mob_list[| 0];
            }
            else
            {
                for(var interval = ds_list_find_index(obj_battle_director.mob_list, selected_enemy); interval &lt; ds_list_size(obj_battle_director.mob_list); interval++)
                {
                    if(!is_undefined(obj_battle_director.mob_list[| interval]) and obj_battle_director.mob_list[| interval] != selected_enemy)
                    {
                        selected_enemy = obj_battle_director.mob_list[| interval];
                        break;
                    }
                }
            }
            
            if(!is_undefined(selected_enemy))
            {
                selected_enemy.selected = true;
                show_debug_message(object_get_name(selected_enemy));
            }
        }
        else if(keyboard_check(up_key))
        {
            if(!is_undefined(selected_enemy))
            {
                selected_enemy.selected = false;
            }
            if(is_undefined(selected_enemy) or (!is_undefined(selected_enemy) and ds_list_find_index(obj_battle_director.mob_list, selected_enemy) == 0))
            {
                selected_enemy = obj_battle_director.mob_list[| ds_list_size(obj_battle_director.mob_list) - 1];
            }
            else
            {
                for(var interval = ds_list_find_index(obj_battle_director.mob_list, selected_enemy); interval &gt; -1; interval--)
                {
                    if(!is_undefined(obj_battle_director.mob_list[| interval]) and obj_battle_director.mob_list[| interval] != selected_enemy)
                    {
                        selected_enemy = obj_battle_director.mob_list[| interval];
                        break;
                    }
                }
            }
            
            if(!is_undefined(selected_enemy))
            {
                selected_enemy.selected = true;
            }
        }
        break;
    case wait_mode:
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
